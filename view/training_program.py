# –§–ê–ô–õ training_program.py
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDRaisedButton, MDFlatButton
from kivymd.uix.dialog import MDDialog
from kivymd.uix.label import MDLabel
from kivymd.uix.menu import MDDropdownMenu
from kivymd.uix.screen import MDScreen
from kivymd.uix.scrollview import MDScrollView
from kivymd.uix.textfield import MDTextField

from model.data import session
from model.exercises import load_exercise_list, save_exercise
from model.storage import save_session_to_file
from model.templates import save_template


#**********************************************************************************************************************#
class TrainingProgramScreen(MDScreen):
    def __init__ (self, **kwargs):
        super().__init__(**kwargs)

        self.main_layout = MDBoxLayout(orientation = 'vertical', spacing = 10, padding = 20)

        self.header = MDLabel(
            text = f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {session.type}',
            halign = 'center',
            font_style = 'H5'
        )
        self.main_layout.add_widget(self.header)

        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        self.name_input = MDTextField(hint_text = "–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        self.main_layout.add_widget(self.name_input)

        self.reps_input = MDTextField(hint_text = '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (reps)', input_filter = 'int')
        self.main_layout.add_widget(self.reps_input)

        self.sets_input = MDTextField(hint_text = '–ü–æ–¥—Ö–æ–¥—ã (sets)', input_filter = 'int')
        self.main_layout.add_widget(self.sets_input)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å
        add_btn = MDRaisedButton(text = '–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', pos_hint = {'center_x': 0.5})
        add_btn.bind(on_release = self.add_exercise)
        self.main_layout.add_widget(add_btn)

        # –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        self.exercise_list = MDBoxLayout(orientation = 'vertical', size_hint_y =None)
        self.exercise_list.bind(minimum_height = self.exercise_list.setter('height'))

        scroll = MDScrollView()
        scroll.add_widget(self.exercise_list)
        self.main_layout.add_widget(scroll)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥)
        save_btn = MDRaisedButton(text = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', pos_hint = {'center_x' :0.5})
        save_btn.bind(on_release = self.save_session)
        self.main_layout.add_widget(save_btn)

        back_btn = MDRaisedButton (text = '–ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏', pos_hint = {'center_x': 0.5})
        back_btn.bind(on_release = self.go_back)
        self.main_layout.add_widget(back_btn)

        #–ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω
        template_btn = MDRaisedButton(text = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω', pos_hint={'center_x':0.5})
        template_btn.bind(on_release = self.ask_template_name)
        self.main_layout.add_widget(template_btn)

        self.add_widget(self.main_layout)

    def on_pre_enter(self, *args):
        if not session.type:
            self.manager.current = 'training_type'
            return
        # –û–±–Ω–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ
        self.header.text = f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {session.type}'
        self.refresh_list()

    def add_exercise(self, instance):
        name = self.name_input.text.strip()
        reps = self.reps_input.text.strip()
        sets = self.sets_input.text.strip()

        if name and reps and sets:
            print(f"–î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {name}, {reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, {sets} –ø–æ–¥—Ö–æ–¥–æ–≤")
            session.add_exercise(name, int(reps), int(sets))
            self.name_input.text = ''
            self.reps_input.text = ''
            self.sets_input.text = ''
            self.refresh_list()

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        exercise_name_input = MDTextField(
            hint_text='–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
            mode='rectangle'
        )
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercise_names = load_exercise_list()

        # –°–æ–∑–¥–∞—ë–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
        menu_items = [{
            'text': name,
            'viewclass': 'OneLineListItem',
            'on_release': lambda x=name: set_exercise_name(x)
        }
            for name in exercise_names
        ]

        menu = MDDropdownMenu(
            caller=exercise_name_input,
            items=menu_items,
            width_mult=4
        )

        exercise_name_input.bind(on_focus=lambda instance, value: menu.open() if value else None)
        if name:
            save_exercise(name) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π

        self.init_exercise_dropdown()

    def init_exercise_dropdown(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        exercise_names = load_exercise_list()

        menu_items = [{
            'text':name,
            'viewclass': 'OneLineListItem',
            'on_release': lambda x=name: self.set_exercise_name(x)
        } for name in exercise_names]

        self.menu = MDDropdownMenu(
            caller = self.name_input,
            items = menu_items,
            width_mult = 4
        )
        self.name_input.bind(on_focus = self.open_menu)

    def set_exercise_name(self, name):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        self.name_input.text = name
        self.menu.dismiss()

    def open_menu(self, instance, value):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        if value:
            self.menu.open()

    def refresh_list(self):
            self.exercise_list.clear_widgets()
            for ex in session.exercises:
                ex_label = MDLabel(
                    text = f"{ex['name']} - {ex['sets']}√ó{ex['reps']}",
                    halign = 'left'
                )
                self.exercise_list.add_widget(ex_label)

    def save_session(self, instance):
        print(f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {session}')
        save_session_to_file()
        self.refresh_list()

    def go_back(self, instance):
        self.manager.current  = 'training_history'

    def ask_template_name(self, instance):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
        content = MDBoxLayout(orientation = 'vertical', spacing = 10, size_hint_y=None, height=60)
        text_field = MDTextField(hint_text = '–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞')
        content.add_widget(text_field)

        dialog = MDDialog(
            title = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω',
            type = 'custom',
            content_cls = content,
            buttons = [
                MDFlatButton(text = '–û–¢–ú–ï–ù–ê', on_release = lambda x: dialog.dismiss()),
                MDRaisedButton(text = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', on_release = lambda x: self._save_template_name(text_field, dialog))
            ]
                          )
        dialog.open()

    def _save_template_name(self, text_field, dialog):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        name = text_field.text.strip()
        if name:
            save_template(name)
            dialog.dismiss()
        else:
            text_field.error = True
            text_field.helper_text = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞'

#--------------------------------------------------------------------------------------------------------------#
