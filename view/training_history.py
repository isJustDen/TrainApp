#—Ñ–∞–π–ª training_history,py
import json
import os.path
from types import NoneType

from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDRaisedButton, MDFlatButton
from kivymd.uix.button.button import theme_text_color_options
from kivymd.uix.card import MDCard
from kivymd.uix.label import MDLabel
from kivymd.uix.screen import MDScreen
from kivymd.uix.tab.tab import MDTabsScrollView

from model.data import session
from model.storage import load_all_sessions

#**********************************************************************************************************************#
class TrainingHistoryScreen(MDScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # -------------------------------------------------------------------------------------------------------------‚Ññ
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞
        self.layout = MDBoxLayout(orientation = 'vertical', spacing = 10, padding = 20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–∫—Ä–∞–Ω–∞
        self.title = MDLabel(text = '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', halign = 'center', font_style = 'H5')
        self.layout.add_widget(self.title)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        self.scroll = MDTabsScrollView()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        self.history_list = MDBoxLayout(orientation = 'vertical', size_hint_y = None)
        self.history_list.bind(minimum_height = self.history_list.setter('height'))
        self.scroll.add_widget(self.history_list)
        self.layout.add_widget(self.scroll)

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        back_btn = MDRaisedButton(text = '–ù–∞–∑–∞–¥', pos_hint ={'center_x': 0.5})
        back_btn.bind(on_release = self.go_back)
        self.layout.add_widget(back_btn)

        self.add_widget(self.layout)

    def on_pre_enter(self, *args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —ç–∫—Ä–∞–Ω–∞"""
        self.refresh_history()

    def refresh_history(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        self.history_list.clear_widgets()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        sessions = load_all_sessions()

        # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not sessions:
            no_data_label = MDLabel(text = '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', halign = 'center', theme_text_color = 'Secondary')
            self.history_list.add_widget(no_data_label)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
        for session_data in reversed(sessions):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            session_type = session_data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
            timestamp = session_data.get('timestamp', '–ë–µ–∑ –¥–∞—Ç—ã')

            display_type = str(session_type).capitalize() if session_type else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'
            text = f'[{timestamp}] {display_type}\n'

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            exercises = session_data.get('exercises', [])
            if  exercises:
                for ex in exercises:
                    name = ex.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    sets = ex.get('sets', '?')
                    reps = ex.get('reps', '?')
                    text += f" - {name} ({sets}√ó{reps})\n"
            else:
                 text += '- –ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n'

            ##–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –¥–∞—Ç—É, —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
            height = 80 +len(exercises) * 30 ## –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –≤—ã—Å–æ—Ç—ã

            card = MDCard(orientation = 'vertical', padding = 10, size_hint_y = None, height = height if exercises  else 60 )
            label = MDLabel(text = text.strip(), halign = 'left', theme_text_color = 'Primary')

            repeat_btn = MDFlatButton(text = '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', pos_hint = {'right': 1})
            repeat_btn.bind(on_release = lambda btn , data = session_data: self.repeat_session(data))

            delete_btn = MDFlatButton(text = '–£–¥–∞–ª–∏—Ç—å', pos_hint = {'right': 1})
            delete_btn.bind(on_release = lambda btn, data = session_data: self.delete_session(data))

            btn_box = MDBoxLayout(orientation = 'horizontal', size_hint_y = None, height = 40, spacing = 10, padding = 10)
            btn_box.add_widget(repeat_btn)
            btn_box.add_widget(delete_btn)

            card.add_widget(label)
            card.add_widget(btn_box)

            self.history_list.add_widget(card)

    #–õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    def repeat_session(self, data):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        session.reset()
        session.set_type(data.get("type"))

        for ex in data.get('exercises', []):
            name = ex.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            sets = ex.get('sets', 0)
            reps = ex.get('reps', 0)
            session.add_exercise(name, reps, sets)

        print(f"üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {session}")
        self.manager.current = 'training_program'

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–º–æ–π(–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    def go_back(self, instance):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.manager.current = 'main_menu'

    def delete_session(self, data_to_delete):
        """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫—Ä–∞–Ω"""
        path = 'data/training_history.json'
        if not os.path.exists(path):
            print("‚ùå –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑
            with open(path, 'r', encoding='utf-8') as f:
                # –£–¥–∞–ª—è–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                all_sessions = json.load(f)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            updated_sessions = [s for s in all_sessions if s != data_to_delete]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(updated_sessions, f, ensure_ascii=False, indent=4)

            print("‚úÖ–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            self.refresh_history()

        except Exception as e:
            print(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

